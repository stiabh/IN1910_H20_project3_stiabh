import numpy as np
import matplotlib.pyplot as plt
plt.ion()   # force interactive plots


def rand_points(c, n=1000):
    """Return n random points within triangle defined by corners in array c."""

    rand_points = np.empty(shape=(n, 2))
    for i in range(n):
        w = np.random.random(3)
        w = 1/sum(w)*w
        rand_points[i] = w[0]*c[0] + w[1]*c[1] + w[2]*c[2]
        
    return rand_points


def chaos_game(c, n=10000):
    """Return n points generated by chaos game algorithm,
       using triangle defined by corners in array c."""

    w = np.random.random(3)                 # random weights
    w = 1/sum(w)*w                          # weights sum to 1
    x = w[0]*c[0] + w[1]*c[1] + w[2]*c[2]   # starting point

    # Skip first 5 points:
    for i in range(6):
        j = np.random.randint(3)
        x = (x + c[j])/2

    # Save n next points:
    X = np.empty(shape=(n, 2))
    X[0] = x
    for i in range(n-1):
        j = np.random.randint(3)
        X[i+1] = (X[i] + c[j])/2

    return X


# First two corners of an equilateral triangle:
c0 = np.array([0, 0])
c1 = np.array([1, 0])

# We can use the fact that every angle in an equilateral triangle
# is 60 degrees, or pi/3 radians, to find the coordinates of the
# third corner. Starting in the origin, we have x = cos(pi/3)
# and y = sin(pi/3), which equals:
c2 = np.array([1/2, np.sqrt(3)/2])
c = [c0, c1, c2]

# Plot corners to confirm triangle is equilateral:
plt.scatter(*zip(*c))
plt.show()

# Plot 1000 random points within triangle:
plt.scatter(*zip(*rand_points(c, 1000)), color="r")

# # Plot points generated by chaos game algorithm:
plt.figure()
plt.scatter(*zip(*chaos_game(c, 10000)), s=1, marker=".")
plt.axis("equal")
plt.axis("off")
plt.show()
