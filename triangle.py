import numpy as np
import matplotlib.pyplot as plt
plt.ion()   # force interactive plots


def rand_points(c, n=1000):
    """Return n random points within triangle.
    
    Args:
        c: Array containing corners of triangle, in (x, y)-coords.
        n: Number of points to return (default 1000).

    Returns:
        rand_points: Array with n random points within triangle.
    """
    rand_points = np.empty(shape=(n, 2))
    for i in range(n):
        w = np.random.random(3)
        w = 1/sum(w)*w
        rand_points[i] = w[0]*c[0] + w[1]*c[1] + w[2]*c[2]

    return rand_points


def chaos_game_base(c, n):
    """Base function for chaos game algorithm.

    Not to be run on its own, should be used by specific iteration functions.
    
    Args:
        c: Array containing corners of triangle, in (x, y)-coords.
        n: Number of points to return.

    Returns:
        X: Array of size n x 2 to be filled by points generated by
          chaos game algorithm, where X[0] is the starting point
          after 6 iterations of algorithm.
        j: Random corner index to be used further by algorithm.   
    """
    w = np.random.random(3)                 # random weights
    w = 1/np.sum(w)*w                       # weights sum to 1
    x = w[0]*c[0] + w[1]*c[1] + w[2]*c[2]   # starting point

    # Skip first 5 points:
    for i in range(6):
        j = np.random.randint(3)
        x = (x + c[j])/2

    # Save n next points:
    X = np.empty(shape=(n, 2))
    X[0] = x

    return X, j


def chaos_game(c, n=10000):
    """Returns array with n points generated by chaos game algorithm.
    
    Args:
        c: Array containing corners of triangle, in (x, y)-coords.
        n: Number of points to return (default 10000).

    Returns:
        X: Array of size n x 2 with n random points generated by
          chaos game algorithm.  
    """
    X, j = chaos_game_base(c, n)

    for i in range(n-1):
        j = np.random.randint(3)
        X[i+1] = (X[i] + c[j])/2

    return X


def chaos_game_colors(c, n=10000):
    """Return array with n points and array with corresponding corner.
    
    Args:
        c: Array containing corners of triangle, in (x, y)-coords.
        n: Number of points to return (default 10000).

    Returns:
        X: Array of size n x 2 with n random points generated by
          chaos game algorithm.  
        J: Array of size n with generated j-index corresponding to
          the points in X. Used for coloring in plots.
    """
    X, j = chaos_game_base(c, n)
    J = np.empty(n)
    J[0] = j

    for i in range(n-1):
        j = np.random.randint(3)
        J[i+1] = j
        X[i+1] = (X[i] + c[j])/2

    return X, J


def chaos_game_colors_RGB(c, n=10000):
    """Return array with n points and array with corresponding RGB codes.

    Args:
        c: Array containing corners of triangle, in (x, y)-coords.
        n: Number of points to return (default 10000).

    Returns:
        X: Array of size n x 2 with n random points generated by
          chaos game algorithm.  
        C: Array of size n x 3 with generated RBG colors corresponding to
          the points in X. Used for coloring in plots.
    """
    X, j = chaos_game_base(c, n)

    r = np.array([[1, 0, 0], [0, 1, 0], [0, 0, 1]])    # RGB vectors
    C = np.empty(shape=(n, 3))    # color matrix
    C[0] = [0, 0, 0]

    for i in range(n-1):
        j = np.random.randint(3)
        C[i+1] = (C[i] + r[j])/2
        X[i+1] = (X[i] + c[j])/2
    return X, C


# First two corners of an equilateral triangle:
c0 = np.array([0, 0])
c1 = np.array([1, 0])

# We can use the fact that every angle in an equilateral triangle
# is 60 degrees, or pi/3 radians, to find the coordinates of the
# third corner. Starting in the origin, we have x = cos(pi/3)
# and y = sin(pi/3), which equals:
c2 = np.array([1/2, np.sqrt(3)/2])
c = [c0, c1, c2]

# Plot corners to confirm triangle is equilateral:
plt.scatter(*zip(*c))

# Plot 1000 random points within triangle:
plt.scatter(*zip(*rand_points(c, 1000)), c="r")

# Plot points generated by chaos game algorithm:
plt.figure()
plt.scatter(*zip(*chaos_game(c, 10000)), s=1.5, marker=".")
plt.axis("equal")
plt.axis("off")

# Colored points generated by chaos_game_colors():
X, colors = chaos_game_colors(c, 10000)
red = X[colors == 0]
green = X[colors == 1]
blue = X[colors == 2]
plt.figure()
plt.scatter(*zip(*red), c="red",  s=1.5, marker=".")
plt.scatter(*zip(*green), c="green", s=1.5, marker=".")
plt.scatter(*zip(*blue), c="blue", s=1.5, marker=".")
plt.axis("equal")
plt.axis("off")

# Colored points generated by chaos_game_colors_RGB():
X, colors = chaos_game_colors_RGB(c, 10000)
plt.figure()
plt.scatter(*zip(*X), c=colors, s=1.5, marker=".")
plt.axis("equal")
plt.axis("off")
plt.show()